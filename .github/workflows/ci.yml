name: CI

on:
  push:
    tags:
      - '**'
    branches:
      - master
  workflow_dispatch:

env:
  DOCKER_REGISTRY: ghcr.io
  DOCKER_IMAGE_NAME: ${{ github.repository }}

jobs:
  build-docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: ${{ startsWith(github.ref, 'refs/tags') }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
  build-native:
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: linux
            runner: ubuntu-latest
          - os: macos
            runner: macos-10.15
          - os: windows
            runner: windows-latest
    env:
      PYTHONHASHSEED: 42
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
          architecture: x64
      - name: Set outputs
        id: vars
        run: echo "::set-output name=BUILD_FILE_NAME::gbc-validator-data-generator-$(git rev-parse --short HEAD)-${{ matrix.os }}-amd64"
      - name: Install building requirements on ${{ matrix.os }}
        run: |
          pip3 install -r ./build_configs/${{ matrix.os }}/requirements.txt;
      - name: Build with build.spec
        run: |
          mkdir ${{ steps.vars.outputs.BUILD_FILE_NAME }};
          pyinstaller --distpath ./${{ steps.vars.outputs.BUILD_FILE_NAME }} ./build_configs/${{ matrix.os }}/build.spec;
      - name: Compress the file
        if: ${{ matrix.os == 'linux' }}
        run: |
          tar -zcvf ${{ steps.vars.outputs.BUILD_FILE_NAME }}.tar.gz ./${{ steps.vars.outputs.BUILD_FILE_NAME }};
          mkdir /tmp/artifacts;
          cp ${{ steps.vars.outputs.BUILD_FILE_NAME }}.tar.gz /tmp/artifacts;
          sha256sum ${{ steps.vars.outputs.BUILD_FILE_NAME }}.tar.gz | head -c 64 > /tmp/artifacts/${{ steps.vars.outputs.BUILD_FILE_NAME }}.sha256
      - name: Compress the file
        if: ${{ matrix.os == 'windows' }}
        run: |
          Compress-Archive -Path ./${{ steps.vars.outputs.BUILD_FILE_NAME }} -DestinationPath ./${{ steps.vars.outputs.BUILD_FILE_NAME }};
          mkdir /tmp/artifacts;
          cp ${{ steps.vars.outputs.BUILD_FILE_NAME }}.zip /tmp/artifacts;
          sha256sum ${{ steps.vars.outputs.BUILD_FILE_NAME }}.zip | head -c 64 > /tmp/artifacts/${{ steps.vars.outputs.BUILD_FILE_NAME }}.sha256
      - name: Compress the file
        if: ${{ matrix.os == 'macos' }}
        run: |
          tar -zcvf ${{ steps.vars.outputs.BUILD_FILE_NAME }}.tar.gz ./${{ steps.vars.outputs.BUILD_FILE_NAME }};
          mkdir /tmp/artifacts;
          cp ${{ steps.vars.outputs.BUILD_FILE_NAME }}.tar.gz /tmp/artifacts;
          shasum -a 256 ${{ steps.vars.outputs.BUILD_FILE_NAME }}.tar.gz | head -c 64 > /tmp/artifacts/${{ steps.vars.outputs.BUILD_FILE_NAME }}.sha256
      - name: Upload binary
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os }}
          path: /tmp/artifacts
